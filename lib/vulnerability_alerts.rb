require 'json'
require 'open3'
require 'pry'
require 'octokit'

class VulnerabilityAlerts
  attr_reader :client
  # @param client Octokit::Client
  # @param labels_hash Hash see labels.json for expected structure
  def initialize(client: nil, labels_hash: nil)
    @client = client || connect_client
  end

  # list all vulnerability alerts for an org by repository
  def report_security
    alerts = []
    ["figgy", "bibdata", "dpul", "pulmap", "orangelight"].each do |repo|
      alerts.concat(report_alerts("pulibrary", repo))
    end
    keyed = alerts.group_by { |alert| alert[:securityVulnerability][:advisory][:id] }
    report = keyed.each_with_object({}) do |(k, v), h|
      h[k] = {
        repos: v.map { |data| "In #{data[:repository][:nameWithOwner]} at #{data[:vulnerableManifestPath]}" },
        summary: v.first[:securityVulnerability][:advisory][:summary],
        severity: v.first[:securityVulnerability][:advisory][:severity],
        description: v.first[:securityVulnerability][:advisory][:description],
      }
    end
    report.each_pair do |k, v|
      puts k
      v.each_pair do |vk, vv|
        puts "  #{vk}: #{vv}"
      end
    end; nil # not sure why it also prints the hash
  end

  # lists all the security alerts for a specific repository
  def report_alerts(org, repo)
    response = client.post("/graphql", { query: query(org, repo) }.to_json).to_hash
    alerts = response.dig(:data, :repository, :vulnerabilityAlerts, :nodes).select { |alert| alert[:state] == "OPEN" }
  end

  private

    def connect_client
      Octokit::Client.new(:access_token => token, auto_paginate: true)
    end

    def token
      out, _st = Open3.capture2('lpass show hubot_github_token --notes')
      out
    end

    # summary is essentially the title
    # severity and vulnerableManifestFilename are also helpful.
    def query(org, repo)
    query = <<~GRAPHQL
query {
  repository(owner:"#{org}", name:"#{repo}") {
    id
    name
    vulnerabilityAlerts(first: 100) {
      totalCount
      nodes {
        state
        repository {
          id
          nameWithOwner
        }
        id
        securityVulnerability {
          advisory {
            id
            ghsaId
            description
            summary
            severity
            updatedAt
          }
          severity
        }
        vulnerableManifestFilename
        vulnerableManifestPath
        vulnerableRequirements
      }
    }
  }
}
    GRAPHQL
    end
end
